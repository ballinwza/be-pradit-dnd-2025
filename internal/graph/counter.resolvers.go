package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"
	"time"
)

// Hello is the resolver for the hello field.
func (r *queryResolver) Hello(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: Hello - hello"))
}

// Counter is the resolver for the counter field.
func (r *subscriptionResolver) Counter(ctx context.Context) (<-chan int32, error) {
	ch := make(chan int32)

	go func() {
		defer close(ch)

		for i := 0; ; i++ {
			select {
			case <-ctx.Done():
				fmt.Println("Done Disconnected")
				return
			case <-time.After(1 * time.Second):
				fmt.Printf("Send Number : %d", i)
				ch <- int32(i)
			}
		}
	}()

	return ch, nil
}

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
