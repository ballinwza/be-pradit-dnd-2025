// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Ability struct {
	Strength     int32 `json:"strength"`
	Dexterity    int32 `json:"dexterity"`
	Constitution int32 `json:"constitution"`
	Intelligence int32 `json:"intelligence"`
	Wisdom       int32 `json:"wisdom"`
	Charisma     int32 `json:"charisma"`
}

type AbilityDetail struct {
	ID            string               `json:"id"`
	Name          string               `json:"name"`
	Short         AbilityShortType     `json:"short"`
	DescriptionEn string               `json:"description_en"`
	DescriptionTh string               `json:"description_th"`
	Proficiencies []*ProficiencyDetail `json:"proficiencies"`
}

type Armor struct {
	ID                    string        `json:"id"`
	ArmorType             ArmorType     `json:"armorType"`
	Name                  string        `json:"name"`
	ArmorClass            int32         `json:"armorClass"`
	MaximumPlusArmorClass *int32        `json:"maximumPlusArmorClass,omitempty"`
	StealthAdvantageType  AdvantageType `json:"stealthAdvantageType"`
	Price                 *Coin         `json:"price"`
	StrRequirement        *int32        `json:"strRequirement,omitempty"`
	DescriptionEn         string        `json:"descriptionEn"`
	Weight                *Weight       `json:"weight"`
	ImageURL              string        `json:"imageUrl"`
}

type Character struct {
	ID          string       `json:"id"`
	Name        string       `json:"name"`
	HitPoint    *HitPoint    `json:"hitPoint"`
	CurrentExp  int32        `json:"currentExp"`
	AvatarImage string       `json:"avatarImage"`
	PocketMoney []*Coin      `json:"pocketMoney"`
	Proficiency *Proficiency `json:"proficiency"`
	Ability     *Ability     `json:"ability"`
	ClassID     string       `json:"classId"`
}

type Class struct {
	ID             string       `json:"id"`
	Name           string       `json:"name"`
	DescriptionEn  string       `json:"descriptionEn"`
	DescriptionTh  string       `json:"descriptionTh"`
	DiceHpIncrease DiceRollType `json:"diceHpIncrease"`
}

type Coin struct {
	Name      string        `json:"name"`
	ShortType CoinShortType `json:"shortType"`
	Value     float64       `json:"value"`
}

type Equipment struct {
	ID          string  `json:"id"`
	CharacterID string  `json:"characterId"`
	Armor       *Armor  `json:"armor"`
	RightHanded *Weapon `json:"rightHanded"`
	LeftHanded  *Weapon `json:"leftHanded"`
}

type HitPoint struct {
	MaxHp          int32 `json:"maxHp"`
	CurrrentHp     int32 `json:"currrentHp"`
	TemporaryHp    int32 `json:"temporaryHp"`
	MaxTemporaryHp int32 `json:"maxTemporaryHp"`
}

type Proficiency struct {
	Athletics      int32 `json:"athletics"`
	Arobatics      int32 `json:"arobatics"`
	SleightOfHand  int32 `json:"sleight_of_hand"`
	Stealth        int32 `json:"stealth"`
	Arcana         int32 `json:"arcana"`
	History        int32 `json:"history"`
	Investigation  int32 `json:"investigation"`
	Nature         int32 `json:"nature"`
	Religion       int32 `json:"religion"`
	AnimalHandling int32 `json:"animal_handling"`
	Insight        int32 `json:"insight"`
	Medicine       int32 `json:"medicine"`
	Perception     int32 `json:"perception"`
	Survival       int32 `json:"survival"`
	Deception      int32 `json:"deception"`
	Intimidation   int32 `json:"intimidation"`
	Performance    int32 `json:"performance"`
	Persuasion     int32 `json:"persuasion"`
}

type ProficiencyDetail struct {
	Name          string `json:"name"`
	DescriptionEn string `json:"description_en"`
	DescriptionTh string `json:"description_th"`
}

type Query struct {
}

type Shield struct {
	ID                    string        `json:"id"`
	ArmorType             ArmorType     `json:"armorType"`
	Name                  string        `json:"name"`
	ArmorClass            int32         `json:"armorClass"`
	MaximumPlusArmorClass *int32        `json:"maximumPlusArmorClass,omitempty"`
	StealthAdvantageType  AdvantageType `json:"stealthAdvantageType"`
	Price                 *Coin         `json:"price"`
	StrRequirement        *int32        `json:"strRequirement,omitempty"`
	DescriptionEn         string        `json:"descriptionEn"`
	Weight                *Weight       `json:"weight"`
	ImageURL              string        `json:"imageUrl"`
}

type Subscription struct {
}

type User struct {
	ID          string `json:"id"`
	Email       string `json:"email"`
	Password    string `json:"password"`
	DisplayName string `json:"displayName"`
	UserImage   string `json:"userImage"`
}

type WatchEquipment struct {
	ID          *string `json:"id,omitempty"`
	CharacterID *string `json:"characterId,omitempty"`
	Armor       *string `json:"armor,omitempty"`
	RightHanded *string `json:"rightHanded,omitempty"`
	LeftHanded  *string `json:"leftHanded,omitempty"`
}

type Weapon struct {
	ID             string            `json:"id"`
	Name           string            `json:"name"`
	DiceQuantity   int32             `json:"diceQuantity"`
	DescriptionEn  string            `json:"descriptionEn"`
	DescriptionTh  string            `json:"descriptionTh"`
	DiceRollType   DiceRollType      `json:"diceRollType"`
	DamagedType    DamagedType       `json:"damagedType"`
	Weight         *Weight           `json:"weight"`
	Price          *Coin             `json:"price"`
	WeaponMastery  *WeaponMastery    `json:"weaponMastery"`
	WeaponProperty []*WeaponProperty `json:"weaponProperty"`
	ImageURL       string            `json:"imageUrl"`
	NormalRange    *int32            `json:"normalRange,omitempty"`
	LongRange      *int32            `json:"longRange,omitempty"`
}

type WeaponMastery struct {
	ID            string `json:"id"`
	Name          string `json:"name"`
	DescriptionEn string `json:"descriptionEn"`
	DescriptionTh string `json:"descriptionTh"`
	ImageURL      string `json:"imageUrl"`
}

type WeaponProperty struct {
	ID            string `json:"id"`
	Name          string `json:"name"`
	DescriptionEn string `json:"descriptionEn"`
	DescriptionTh string `json:"descriptionTh"`
	ImageURL      string `json:"imageUrl"`
}

type Weight struct {
	Value int32  `json:"value"`
	Unit  string `json:"unit"`
}

type AbilityShortType string

const (
	AbilityShortTypeStr AbilityShortType = "STR"
	AbilityShortTypeDex AbilityShortType = "DEX"
	AbilityShortTypeCon AbilityShortType = "CON"
	AbilityShortTypeInt AbilityShortType = "INT"
	AbilityShortTypeWis AbilityShortType = "WIS"
	AbilityShortTypeCha AbilityShortType = "CHA"
)

var AllAbilityShortType = []AbilityShortType{
	AbilityShortTypeStr,
	AbilityShortTypeDex,
	AbilityShortTypeCon,
	AbilityShortTypeInt,
	AbilityShortTypeWis,
	AbilityShortTypeCha,
}

func (e AbilityShortType) IsValid() bool {
	switch e {
	case AbilityShortTypeStr, AbilityShortTypeDex, AbilityShortTypeCon, AbilityShortTypeInt, AbilityShortTypeWis, AbilityShortTypeCha:
		return true
	}
	return false
}

func (e AbilityShortType) String() string {
	return string(e)
}

func (e *AbilityShortType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AbilityShortType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AbilityShortType", str)
	}
	return nil
}

func (e AbilityShortType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AbilityShortType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AbilityShortType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type AdvantageType string

const (
	AdvantageTypeDisadvantage AdvantageType = "DISADVANTAGE"
	AdvantageTypeNone         AdvantageType = "NONE"
	AdvantageTypeAdvantage    AdvantageType = "ADVANTAGE"
)

var AllAdvantageType = []AdvantageType{
	AdvantageTypeDisadvantage,
	AdvantageTypeNone,
	AdvantageTypeAdvantage,
}

func (e AdvantageType) IsValid() bool {
	switch e {
	case AdvantageTypeDisadvantage, AdvantageTypeNone, AdvantageTypeAdvantage:
		return true
	}
	return false
}

func (e AdvantageType) String() string {
	return string(e)
}

func (e *AdvantageType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AdvantageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AdvantageType", str)
	}
	return nil
}

func (e AdvantageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AdvantageType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AdvantageType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ArmorType string

const (
	ArmorTypeLight  ArmorType = "LIGHT"
	ArmorTypeMedium ArmorType = "MEDIUM"
	ArmorTypeHeavy  ArmorType = "HEAVY"
	ArmorTypeShield ArmorType = "SHIELD"
)

var AllArmorType = []ArmorType{
	ArmorTypeLight,
	ArmorTypeMedium,
	ArmorTypeHeavy,
	ArmorTypeShield,
}

func (e ArmorType) IsValid() bool {
	switch e {
	case ArmorTypeLight, ArmorTypeMedium, ArmorTypeHeavy, ArmorTypeShield:
		return true
	}
	return false
}

func (e ArmorType) String() string {
	return string(e)
}

func (e *ArmorType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ArmorType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ArmorType", str)
	}
	return nil
}

func (e ArmorType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ArmorType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ArmorType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type CoinShortType string

const (
	CoinShortTypeCp CoinShortType = "CP"
	CoinShortTypeSp CoinShortType = "SP"
	CoinShortTypeEp CoinShortType = "EP"
	CoinShortTypeGp CoinShortType = "GP"
	CoinShortTypePp CoinShortType = "PP"
)

var AllCoinShortType = []CoinShortType{
	CoinShortTypeCp,
	CoinShortTypeSp,
	CoinShortTypeEp,
	CoinShortTypeGp,
	CoinShortTypePp,
}

func (e CoinShortType) IsValid() bool {
	switch e {
	case CoinShortTypeCp, CoinShortTypeSp, CoinShortTypeEp, CoinShortTypeGp, CoinShortTypePp:
		return true
	}
	return false
}

func (e CoinShortType) String() string {
	return string(e)
}

func (e *CoinShortType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CoinShortType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CoinShortType", str)
	}
	return nil
}

func (e CoinShortType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *CoinShortType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e CoinShortType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type DamagedType string

const (
	DamagedTypeBludgeon DamagedType = "BLUDGEON"
	DamagedTypePierce   DamagedType = "PIERCE"
	DamagedTypeSLASh    DamagedType = "SLASH"
)

var AllDamagedType = []DamagedType{
	DamagedTypeBludgeon,
	DamagedTypePierce,
	DamagedTypeSLASh,
}

func (e DamagedType) IsValid() bool {
	switch e {
	case DamagedTypeBludgeon, DamagedTypePierce, DamagedTypeSLASh:
		return true
	}
	return false
}

func (e DamagedType) String() string {
	return string(e)
}

func (e *DamagedType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DamagedType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DamagedType", str)
	}
	return nil
}

func (e DamagedType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *DamagedType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e DamagedType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type DiceRollType string

const (
	DiceRollTypeD20 DiceRollType = "D20"
	DiceRollTypeD12 DiceRollType = "D12"
	DiceRollTypeD10 DiceRollType = "D10"
	DiceRollTypeD8  DiceRollType = "D8"
	DiceRollTypeD6  DiceRollType = "D6"
	DiceRollTypeD4  DiceRollType = "D4"
)

var AllDiceRollType = []DiceRollType{
	DiceRollTypeD20,
	DiceRollTypeD12,
	DiceRollTypeD10,
	DiceRollTypeD8,
	DiceRollTypeD6,
	DiceRollTypeD4,
}

func (e DiceRollType) IsValid() bool {
	switch e {
	case DiceRollTypeD20, DiceRollTypeD12, DiceRollTypeD10, DiceRollTypeD8, DiceRollTypeD6, DiceRollTypeD4:
		return true
	}
	return false
}

func (e DiceRollType) String() string {
	return string(e)
}

func (e *DiceRollType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiceRollType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiceRollType", str)
	}
	return nil
}

func (e DiceRollType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *DiceRollType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e DiceRollType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
