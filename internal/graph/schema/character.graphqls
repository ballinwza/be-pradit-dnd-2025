type CharacterAbility {
  str: Int
  dex: Int
  con: Int
  int: Int
  wis: Int
  cha: Int
}

type CharacterProficiency {
  athletics: Int
  arobatics: Int
  sleightOfHand: Int
  stealth: Int
  arcana: Int
  history: Int
  investigation: Int
  nature: Int
  religion: Int
  animalHandling: Int
  insight: Int
  medicine: Int
  perception: Int
  survival: Int
  deception: Int
  intimidation: Int
  performance: Int
  persuasion: Int
}

type HitPoint {
  maxHp: Int!
  currentHp: Int!
  temporaryHp: Int!
  maxTemporaryHp: Int!
}

type Character {
  id: String!
  name: String!
  hitPoint: HitPoint!
  currentExp: Int!
  avatarImage: String!
  pocketMoney: CharacterPocketMoney
  proficiency: CharacterProficiency
  ability: CharacterAbility
  classId: String!
  userId: String!
}

type CharacterPocketMoney {
  cp: Float
  sp: Float
  ep: Float
  gp: Float
  pp: Float
}

extend type Subscription {
  watchCharacterById(id: String!): Character!
}

extend type Query {
  characterById(id: String!): Character!
  characterListByUserId(userId: String!): [Character!]!
}
