package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"net/http"

	"github.com/ballinwza/be-pradit-dnd-2025/internal/error_handler"
	"github.com/ballinwza/be-pradit-dnd-2025/internal/graph/model"
)

// CharacterByID is the resolver for the characterById field.
func (r *queryResolver) CharacterByID(ctx context.Context, id string) (*model.Character, error) {
	result, err := r.CharacterService.GetCharacterById(ctx, id)
	if err != nil {
		return nil, error_handler.NewValidationError("Failed to get CharacterByID", err, http.StatusInternalServerError).GqlError(ctx)
	}

	return result, nil
}

// CharacterListByUserID is the resolver for the characterListByUserId field.
func (r *queryResolver) CharacterListByUserID(ctx context.Context, userID string) ([]*model.Character, error) {
	result, err := r.CharacterService.GetCharacterListByUserId(ctx, userID)
	if err != nil {
		return nil, error_handler.NewValidationError("Failed to get CharacterByID", err, http.StatusInternalServerError).GqlError(ctx)
	}

	return result, nil
}

// WatchCharacterByID is the resolver for the watchCharacterById field.
func (r *subscriptionResolver) WatchCharacterByID(ctx context.Context, id string) (<-chan *model.Character, error) {
	result, err := r.CharacterService.WatchCharacterById(ctx, id)
	if err != nil {
		return nil, error_handler.NewValidationError("Failed to get WatchCharacterByID", err, http.StatusInternalServerError).GqlError(ctx)
	}
	return result, nil
}

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
